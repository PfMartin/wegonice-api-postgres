// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PfMartin/wegonice-api/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/PfMartin/wegonice-api/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAuthor mocks base method.
func (m *MockStore) CreateAuthor(arg0 context.Context, arg1 db.CreateAuthorParams) (db.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", arg0, arg1)
	ret0, _ := ret[0].(db.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockStoreMockRecorder) CreateAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockStore)(nil).CreateAuthor), arg0, arg1)
}

// CreateRecipe mocks base method.
func (m *MockStore) CreateRecipe(arg0 context.Context, arg1 db.CreateRecipeParams) (db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecipe", arg0, arg1)
	ret0, _ := ret[0].(db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecipe indicates an expected call of CreateRecipe.
func (mr *MockStoreMockRecorder) CreateRecipe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipe", reflect.TypeOf((*MockStore)(nil).CreateRecipe), arg0, arg1)
}

// CreateRecipeIngredient mocks base method.
func (m *MockStore) CreateRecipeIngredient(arg0 context.Context, arg1 db.CreateRecipeIngredientParams) (db.RecipeIngredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecipeIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.RecipeIngredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecipeIngredient indicates an expected call of CreateRecipeIngredient.
func (mr *MockStoreMockRecorder) CreateRecipeIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipeIngredient", reflect.TypeOf((*MockStore)(nil).CreateRecipeIngredient), arg0, arg1)
}

// CreateRecipeStep mocks base method.
func (m *MockStore) CreateRecipeStep(arg0 context.Context, arg1 db.CreateRecipeStepParams) (db.RecipeStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecipeStep", arg0, arg1)
	ret0, _ := ret[0].(db.RecipeStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecipeStep indicates an expected call of CreateRecipeStep.
func (mr *MockStoreMockRecorder) CreateRecipeStep(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipeStep", reflect.TypeOf((*MockStore)(nil).CreateRecipeStep), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteAuthorById mocks base method.
func (m *MockStore) DeleteAuthorById(arg0 context.Context, arg1 int64) (db.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorById", arg0, arg1)
	ret0, _ := ret[0].(db.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthorById indicates an expected call of DeleteAuthorById.
func (mr *MockStoreMockRecorder) DeleteAuthorById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorById", reflect.TypeOf((*MockStore)(nil).DeleteAuthorById), arg0, arg1)
}

// DeleteRecipeById mocks base method.
func (m *MockStore) DeleteRecipeById(arg0 context.Context, arg1 int64) (db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipeById", arg0, arg1)
	ret0, _ := ret[0].(db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecipeById indicates an expected call of DeleteRecipeById.
func (mr *MockStoreMockRecorder) DeleteRecipeById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipeById", reflect.TypeOf((*MockStore)(nil).DeleteRecipeById), arg0, arg1)
}

// DeleteRecipeIngredientById mocks base method.
func (m *MockStore) DeleteRecipeIngredientById(arg0 context.Context, arg1 int64) (db.RecipeIngredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipeIngredientById", arg0, arg1)
	ret0, _ := ret[0].(db.RecipeIngredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecipeIngredientById indicates an expected call of DeleteRecipeIngredientById.
func (mr *MockStoreMockRecorder) DeleteRecipeIngredientById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipeIngredientById", reflect.TypeOf((*MockStore)(nil).DeleteRecipeIngredientById), arg0, arg1)
}

// DeleteRecipeStepById mocks base method.
func (m *MockStore) DeleteRecipeStepById(arg0 context.Context, arg1 int64) (db.RecipeStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipeStepById", arg0, arg1)
	ret0, _ := ret[0].(db.RecipeStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecipeStepById indicates an expected call of DeleteRecipeStepById.
func (mr *MockStoreMockRecorder) DeleteRecipeStepById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipeStepById", reflect.TypeOf((*MockStore)(nil).DeleteRecipeStepById), arg0, arg1)
}

// GetAuthor mocks base method.
func (m *MockStore) GetAuthor(arg0 context.Context, arg1 int64) (db.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthor", arg0, arg1)
	ret0, _ := ret[0].(db.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthor indicates an expected call of GetAuthor.
func (mr *MockStoreMockRecorder) GetAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthor", reflect.TypeOf((*MockStore)(nil).GetAuthor), arg0, arg1)
}

// GetRecipe mocks base method.
func (m *MockStore) GetRecipe(arg0 context.Context, arg1 int64) (db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipe", arg0, arg1)
	ret0, _ := ret[0].(db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipe indicates an expected call of GetRecipe.
func (mr *MockStoreMockRecorder) GetRecipe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipe", reflect.TypeOf((*MockStore)(nil).GetRecipe), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListAuthors mocks base method.
func (m *MockStore) ListAuthors(arg0 context.Context, arg1 db.ListAuthorsParams) ([]db.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuthors", arg0, arg1)
	ret0, _ := ret[0].([]db.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthors indicates an expected call of ListAuthors.
func (mr *MockStoreMockRecorder) ListAuthors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthors", reflect.TypeOf((*MockStore)(nil).ListAuthors), arg0, arg1)
}

// ListRecipeIngredientsByRecipeId mocks base method.
func (m *MockStore) ListRecipeIngredientsByRecipeId(arg0 context.Context, arg1 int64) ([]db.RecipeIngredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipeIngredientsByRecipeId", arg0, arg1)
	ret0, _ := ret[0].([]db.RecipeIngredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecipeIngredientsByRecipeId indicates an expected call of ListRecipeIngredientsByRecipeId.
func (mr *MockStoreMockRecorder) ListRecipeIngredientsByRecipeId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipeIngredientsByRecipeId", reflect.TypeOf((*MockStore)(nil).ListRecipeIngredientsByRecipeId), arg0, arg1)
}

// ListRecipeStepsByRecipeId mocks base method.
func (m *MockStore) ListRecipeStepsByRecipeId(arg0 context.Context, arg1 int64) ([]db.RecipeStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipeStepsByRecipeId", arg0, arg1)
	ret0, _ := ret[0].([]db.RecipeStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecipeStepsByRecipeId indicates an expected call of ListRecipeStepsByRecipeId.
func (mr *MockStoreMockRecorder) ListRecipeStepsByRecipeId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipeStepsByRecipeId", reflect.TypeOf((*MockStore)(nil).ListRecipeStepsByRecipeId), arg0, arg1)
}

// ListRecipes mocks base method.
func (m *MockStore) ListRecipes(arg0 context.Context, arg1 db.ListRecipesParams) ([]db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipes", arg0, arg1)
	ret0, _ := ret[0].([]db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecipes indicates an expected call of ListRecipes.
func (mr *MockStoreMockRecorder) ListRecipes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipes", reflect.TypeOf((*MockStore)(nil).ListRecipes), arg0, arg1)
}

// UpdateAuthorById mocks base method.
func (m *MockStore) UpdateAuthorById(arg0 context.Context, arg1 db.UpdateAuthorByIdParams) (db.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthorById", arg0, arg1)
	ret0, _ := ret[0].(db.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthorById indicates an expected call of UpdateAuthorById.
func (mr *MockStoreMockRecorder) UpdateAuthorById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorById", reflect.TypeOf((*MockStore)(nil).UpdateAuthorById), arg0, arg1)
}

// UpdateRecipeById mocks base method.
func (m *MockStore) UpdateRecipeById(arg0 context.Context, arg1 db.UpdateRecipeByIdParams) (db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipeById", arg0, arg1)
	ret0, _ := ret[0].(db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipeById indicates an expected call of UpdateRecipeById.
func (mr *MockStoreMockRecorder) UpdateRecipeById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipeById", reflect.TypeOf((*MockStore)(nil).UpdateRecipeById), arg0, arg1)
}

// UpdateRecipeIngredientById mocks base method.
func (m *MockStore) UpdateRecipeIngredientById(arg0 context.Context, arg1 db.UpdateRecipeIngredientByIdParams) (db.RecipeIngredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipeIngredientById", arg0, arg1)
	ret0, _ := ret[0].(db.RecipeIngredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipeIngredientById indicates an expected call of UpdateRecipeIngredientById.
func (mr *MockStoreMockRecorder) UpdateRecipeIngredientById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipeIngredientById", reflect.TypeOf((*MockStore)(nil).UpdateRecipeIngredientById), arg0, arg1)
}

// UpdateRecipeStepById mocks base method.
func (m *MockStore) UpdateRecipeStepById(arg0 context.Context, arg1 db.UpdateRecipeStepByIdParams) (db.RecipeStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipeStepById", arg0, arg1)
	ret0, _ := ret[0].(db.RecipeStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipeStepById indicates an expected call of UpdateRecipeStepById.
func (mr *MockStoreMockRecorder) UpdateRecipeStepById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipeStepById", reflect.TypeOf((*MockStore)(nil).UpdateRecipeStepById), arg0, arg1)
}
